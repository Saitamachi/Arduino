#include <Servo.h>
#include <SoftwareSerial.h>
#include <Wire.h>
#include <MPU6050_light.h>
 
 MPU6050 mpu(Wire);
 unsigned long timer = 0;

#define MIN_PULSE_LENGTH 1000
#define MAX_PULSE_LENGTH 1010


Servo esc1;
Servo esc2;
Servo esc3;
Servo esc4;

long unsigned a = 0;
long unsigned delay_start = 0;

int HOVER_SPEED = 1165; // hover bij ong 330g

long x_ang, y_ang, z_ang;
char data;

int MOTOR_1 = 3;
int MOTOR_2 = 5;
int MOTOR_3 = 6;
int MOTOR_4 = 9;

int motor1 = 0;
int motor2 = 0;
int motor3 = 0;
int motor4 = 0;

int dir_pin = 0;
int step_pin = 1;

// MPU VARS ============================
int gyro_x, gyro_y, gyro_z;
long acc_x, acc_y, acc_z, acc_total_vector;
int temperature;
long gyro_x_cal, gyro_y_cal, gyro_z_cal;
long loop_timer;
int lcd_loop_counter;
float angle_pitch, angle_roll;
int angle_pitch_buffer, angle_roll_buffer;
boolean set_gyro_angles;
float angle_roll_acc, angle_pitch_acc;
float angle_pitch_output, angle_roll_output;

bool print_mpu = false;
// ====================================


SoftwareSerial mySerial(4, 7); // TX, RX

int initESC(){
  esc1.attach(MOTOR_1, 1000, 2000);
  esc2.attach(MOTOR_2, 1000, 2000);
  esc3.attach(MOTOR_3, 1000, 2000);
  esc4.attach(MOTOR_4, 1000, 2000);

  esc1.write(90);
  esc2.write(90);
  esc3.write(90);
  esc4.write(90);

  esc1.writeMicroseconds(1500);
  esc2.writeMicroseconds(1500);
  esc3.writeMicroseconds(1500);
  esc4.writeMicroseconds(1500);

  delay(3000);
  return 1;
  
  }

void start_mpu(){
  //Activate the MPU-6050
  Wire.beginTransmission(0x68);                                        //Start communicating with the MPU-6050
  Wire.write(0x6B);                                                    //Send the requested starting register
  Wire.write(0x00);                                                    //Set the requested starting register
  Wire.endTransmission();                                              //End the transmission
  //Configure the accelerometer (+/-8g)
  Wire.beginTransmission(0x68);                                        //Start communicating with the MPU-6050
  Wire.write(0x1C);                                                    //Send the requested starting register
  Wire.write(0x10);                                                    //Set the requested starting register
  Wire.endTransmission();                                              //End the transmission
  //Configure the gyro (500dps full scale)
  Wire.beginTransmission(0x68);                                        //Start communicating with the MPU-6050
  Wire.write(0x1B);                                                    //Send the requested starting register
  Wire.write(0x08);                                                    //Set the requested starting register
  Wire.endTransmission();}
void setup_mpu(){
  start_mpu();
  mySerial.println("======================");
  mySerial.print("Calibrating gyro");                                  //Print text to screen
  for (int cal_int = 0; cal_int < 2000 ; cal_int ++){                  //Run this code 2000 times
    if(cal_int % 125 == 0)mySerial.print(".");                         //Print a dot on the LCD every 125 readings
    read_mpu();                                                        //Read the raw acc and gyro data from the MPU-6050
    gyro_x_cal += gyro_x;                                              //Add the gyro x-axis offset to the gyro_x_cal variable
    gyro_y_cal += gyro_y;                                              //Add the gyro y-axis offset to the gyro_y_cal variable
    gyro_z_cal += gyro_z;                                              //Add the gyro z-axis offset to the gyro_z_cal variable
    delay(3);                                                          //Delay 3us to simulate the 250Hz program loop
  }
  gyro_x_cal /= 2000;                                                  //Divide the gyro_x_cal variable by 2000 to get the avarage offset
  gyro_y_cal /= 2000;                                                  //Divide the gyro_y_cal variable by 2000 to get the avarage offset
  gyro_z_cal /= 2000;                                                  //Divide the gyro_z_cal variable by 2000 to get the avarage offset

  loop_timer = micros();
  mySerial.println(" ");
  mySerial.println("======================");}
void read_mpu(){                                                       //Subroutine for reading the raw gyro and accelerometer data
  Wire.beginTransmission(0x68);                                        //Start communicating with the MPU-6050
  Wire.write(0x3B);                                                    //Send the requested starting register
  Wire.endTransmission();                                              //End the transmission
  Wire.requestFrom(0x68,14);                                           //Request 14 bytes from the MPU-6050
  while(Wire.available() < 14);                                        //Wait until all the bytes are received
  acc_x = Wire.read()<<8|Wire.read();                                  //Add the low and high byte to the acc_x variable
  acc_y = Wire.read()<<8|Wire.read();                                  //Add the low and high byte to the acc_y variable
  acc_z = Wire.read()<<8|Wire.read();                                  //Add the low and high byte to the acc_z variable
  temperature = Wire.read()<<8|Wire.read();                            //Add the low and high byte to the temperature variable
  gyro_x = Wire.read()<<8|Wire.read();                                 //Add the low and high byte to the gyro_x variable
  gyro_y = Wire.read()<<8|Wire.read();                                 //Add the low and high byte to the gyro_y variable
  gyro_z = Wire.read()<<8|Wire.read();                                 //Add the low and high byte to the gyro_z variable
}
void calculate_angles(){
  read_mpu();                                                //Read the raw acc and gyro data from the MPU-6050

  gyro_x -= gyro_x_cal;                                                //Subtract the offset calibration value from the raw gyro_x value
  gyro_y -= gyro_y_cal;                                                //Subtract the offset calibration value from the raw gyro_y value
  gyro_z -= gyro_z_cal;                                                //Subtract the offset calibration value from the raw gyro_z value
  
  //Gyro angle calculations
  //0.0000611 = 1 / (250Hz / 65.5)
  angle_pitch += gyro_x * 0.0000611;                                   //Calculate the traveled pitch angle and add this to the angle_pitch variable
  angle_roll += gyro_y * 0.0000611;                                    //Calculate the traveled roll angle and add this to the angle_roll variable
  
  //0.000001066 = 0.0000611 * (3.142(PI) / 180degr) The Arduino sin function is in radians
  angle_pitch += angle_roll * sin(gyro_z * 0.000001066);               //If the IMU has yawed transfer the roll angle to the pitch angel
  angle_roll -= angle_pitch * sin(gyro_z * 0.000001066);               //If the IMU has yawed transfer the pitch angle to the roll angel
  
  //Accelerometer angle calculations
  acc_total_vector = sqrt((acc_x*acc_x)+(acc_y*acc_y)+(acc_z*acc_z));  //Calculate the total accelerometer vector
  //57.296 = 1 / (3.142 / 180) The Arduino asin function is in radians
  angle_pitch_acc = asin((float)acc_y/acc_total_vector)* 57.296;       //Calculate the pitch angle
  angle_roll_acc = asin((float)acc_x/acc_total_vector)* -57.296;       //Calculate the roll angle
  
  //Place the MPU-6050 spirit level and note the values in the following two lines for calibration
  angle_pitch_acc -= 0.0;                                              //Accelerometer calibration value for pitch
  angle_roll_acc -= 0.0;                                               //Accelerometer calibration value for roll

  if(set_gyro_angles){                                                 //If the IMU is already started
    angle_pitch = angle_pitch * 0.9996 + angle_pitch_acc * 0.0004;     //Correct the drift of the gyro pitch angle with the accelerometer pitch angle
    angle_roll = angle_roll * 0.9996 + angle_roll_acc * 0.0004;        //Correct the drift of the gyro roll angle with the accelerometer roll angle
  }
  else{                                                                //At first start
    angle_pitch = angle_pitch_acc;                                     //Set the gyro pitch angle equal to the accelerometer pitch angle 
    angle_roll = angle_roll_acc;                                       //Set the gyro roll angle equal to the accelerometer roll angle 
    set_gyro_angles = true;                                            //Set the IMU started flag
  }
  
  //To dampen the pitch and roll angles a complementary filter is used
  angle_pitch_output = angle_pitch_output * 0.9 + angle_pitch * 0.1;   //Take 90% of the output pitch value and add 10% of the raw pitch value
  angle_roll_output = angle_roll_output * 0.9 + angle_roll * 0.1;      //Take 90% of the output roll value and add 10% of the raw roll value

  while(micros() - loop_timer < 4000);                                 //Wait until the loop_timer reaches 4000us (250Hz) before starting the next loop
  loop_timer = micros();  
}
void print_angles(){
    angle_roll_buffer = angle_roll_output * 10 ; 
    mySerial.print(abs(angle_roll_buffer)/1000);    //Print first number
    mySerial.print((abs(angle_roll_buffer)/100)%10);//Print second number
    mySerial.print((abs(angle_roll_buffer)/10)%10); //Print third number
    mySerial.print(".");                             //Print decimal point
    mySerial.print(abs(angle_roll_buffer)%10);      //Print decimal number

    mySerial.print(" | ");
    
    angle_pitch_buffer = angle_pitch_output * 10 ;
    mySerial.print(abs(angle_pitch_buffer)/1000);    //Print first number
    mySerial.print((abs(angle_pitch_buffer)/100)%10);//Print second number
    mySerial.print((abs(angle_pitch_buffer)/10)%10); //Print third number
    mySerial.print(".");                             //Print decimal point
    mySerial.println(abs(angle_pitch_buffer)%10);      //Print decimal number
    
  }

void setup() {
  Serial.begin(9600);
  Wire.begin();
  while ( !Serial ) {
    ;
  }
  mySerial.begin(9600);

  // MPU---------------------
  setup_mpu();
  // ------------------------

  // Motoren ----------------
  int escOk = initESC();
  // ------------------------
  
  delay(1000);
  displayInstructions();
}

void loop() {
  calculate_angles();
  /*
  if((millis() - 500) >= a){
    a += 500;
    print_angles();
    }
    */
  
  if (mySerial.available()){
    data = mySerial.read();

    switch (data){ 
      //0
      case 48:mySerial.println("Sending minimum throttle");
              esc1.writeMicroseconds(MIN_PULSE_WIDTH);
              esc2.writeMicroseconds(MIN_PULSE_WIDTH);
              esc3.writeMicroseconds(MIN_PULSE_WIDTH);
              esc4.writeMicroseconds(MIN_PULSE_WIDTH);
              break;

      //1
      case 49:mySerial.println("Sending 14%");
              esc1.writeMicroseconds(1140);
              esc2.writeMicroseconds(1140);
              esc3.writeMicroseconds(1140);
              esc4.writeMicroseconds(1140);
              break;

      //2
      case 50:mySerial.println("Sending 10%");
              esc1.writeMicroseconds(1100);
              esc2.writeMicroseconds(1100);
              esc3.writeMicroseconds(1100);
              esc4.writeMicroseconds(1100);
              delay_start = millis();
              while(true){

                if((millis() - delay_start) >= 77000){
                  mySerial.println("stop motoren");
                  mySerial.println(millis() - delay_start);
                  esc1.writeMicroseconds(1000);
                  esc2.writeMicroseconds(1000);
                  esc3.writeMicroseconds(1000);
                  esc4.writeMicroseconds(1000);
                  break;
                  }
                }
              
              break;
      //3
      case 51:mySerial.println("Sending 16%");
              esc1.writeMicroseconds(1160);
              esc2.writeMicroseconds(1160);
              esc3.writeMicroseconds(1160);
              esc4.writeMicroseconds(1160);
              break;
      //4
      case 52:mySerial.println("Sending 16.5%");
              esc1.writeMicroseconds(1165);
              esc2.writeMicroseconds(1165);
              esc3.writeMicroseconds(1165);
              esc4.writeMicroseconds(1165);
              break;

      // 5
      case 53 : mySerial.print("Running test in 3");
                delay(1000);
                mySerial.print(" 2");
                delay(1000);
                mySerial.println(" 1...");
                delay(1000);
                test();
                break;
      // 6
      case 54: mySerial.println("Releasing arms");
               
               for(int i = 1; i <= 1000; i++){
                release_arms();
                }
                
                while(true){
                  release_arms();
                  }
               mySerial.println("Stop");    
               break;
       // 7
      case 55: print_angles();        
               break;
       
      break;
      }
    
    if (print_mpu){
      //
    }
    
}
}


void release_arms(){
  mySerial.println("TEST");
  digitalWrite(step_pin, HIGH);
  delayMicroseconds(100);
  digitalWrite(step_pin, LOW);
  delayMicroseconds(100);
  }


void test(){
    for (int i = MIN_PULSE_LENGTH; i <= 1150; i += 5) {
        mySerial.print("Pulse length = ");
        mySerial.println(i);
        
        esc1.writeMicroseconds(i);
        esc2.writeMicroseconds(i);
        esc3.writeMicroseconds(i);
        esc4.writeMicroseconds(i);
        delay(1000);
    }
    mySerial.println("STOP");
    esc1.writeMicroseconds(MIN_PULSE_LENGTH);
    esc2.writeMicroseconds(MIN_PULSE_LENGTH);
    esc3.writeMicroseconds(MIN_PULSE_LENGTH);
    esc4.writeMicroseconds(MIN_PULSE_LENGTH);
}


void displayInstructions()
{  
    mySerial.println("READY - PLEASE SEND INSTRUCTIONS AS FOLLOWING :");
    mySerial.println("\t0 : Send min throttle       | als eerst doen");
    mySerial.println("\t1 : Send 13% throttle       | 13% snelheid");
    mySerial.println("\t2 : Test 77 seconds flight  | 77 seconden aan");
    mySerial.println("\t3 : Send 16% throttle       | 16% snelheid");
    mySerial.println("\t4 : Send 16.5% throttle     | 16,5% snelheid");
    mySerial.println("\t5 : Run test function       | 0% tot 15%");
    mySerial.println("\t6 : Release arms            | werkt niet");
    mySerial.println("\t7 : Toggle angle output     | werkt niet\n");
}
